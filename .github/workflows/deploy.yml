name: Deploy to EC2

on:
  push:
    branches:
      - main

env:
  APP_NAME: ec2-react-starter
  BASE_DIR: /var/www
  NGINX_HTML_DIR: /usr/share/nginx/html
  REMOTE_TEMP_DIR: ~/app
  ECOSYSTEM_FILE: ecosystem.config.js
  STAGE: production


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        echo "REMOTE_DEPLOY_DIR=${BASE_DIR}/${APP_NAME}" >> $GITHUB_ENV
        echo "PM2_APP_NAME=${APP_NAME}-${STAGE}" >> $GITHUB_ENV

    - name: Print environment varibles
      run: |
        echo "APP_NAME ${APP_NAME}"
        echo "NGINX_HTML_DIR ${NGINX_HTML_DIR}"
        echo "ECOSYSTEM_FILE ${ECOSYSTEM_FILE}"
        echo "STAGE  ${STAGE}"
        echo "REMOTE_DEPLOY_DIR ${{ env.REMOTE_DEPLOY_DIR }}"
        echo "PM2_APP_NAME ${{ env.PM2_APP_NAME }}"

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install server dependencies
      working-directory: ./
      run: npm ci

    - name: Install client dependencies
      working-directory: ./client
      run: npm ci

    - name: Build client app
      working-directory: ./client
      run: npm run build

    - name: Add SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.PEM_FILE_NAME }}
        chmod 600 ~/.ssh/${{ secrets.PEM_FILE_NAME }}

    - name: Transfer app to EC2 (excluding unnecessary files)
      run: |
        rsync -avz --delete \
          --exclude 'client/node_modules' \
          --exclude '.git' \
          --exclude '.idea' \
          --exclude '.env' \
          --exclude '.instructions' \
          -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.PEM_FILE_NAME }}" \
          ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/app/

    - name: Deploy and restart services on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.PEM_FILE_NAME }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'

        # Source the user's profile to ensure pm2 is in PATH
        source ~/.profile || source ~/.bashrc || true

        # Prepare the deployment directory
        sudo rm -rf ${{ env.REMOTE_DEPLOY_DIR }}
        sudo mkdir -p ${{ env.REMOTE_DEPLOY_DIR }}
        sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} ${{ env.REMOTE_DEPLOY_DIR }}
        sudo mv ${{ env.REMOTE_TEMP_DIR }}/* ${{ env.REMOTE_DEPLOY_DIR }}/
        sudo rm -rf ${{ env.REMOTE_TEMP_DIR }}

        # Copy built React app to Nginx directory
        sudo cp -r ${{env.REMOTE_DEPLOY_DIR}}/client/build/* ${{env.NGINX_HTML_DIR}}/

        # Set permissions for Nginx and ecosystem.config.js
        sudo usermod -aG www-data ${{ secrets.EC2_USER }}
        sudo chown -R www-data:www-data ${{env.NGINX_HTML_DIR}}
        sudo chmod 640 ${REMOTE_DEPLOY_DIR}/${{env.ECOSYSTEM_FILE}}
        sudo chown www-data:www-data ${{env.REMOTE_DEPLOY_DIR}}/${{env.ECOSYSTEM_FILE}}
        sudo chmod 750 ${{env.REMOTE_DEPLOY_DIR}}/

        # Start Nginx and deploy the Node.js app with PM2
        # Stop the PM2 process if it is running
        if pm2 stop ${{ env.PM2_APP_NAME }}; then
        echo "PM2 process stopped"
        fi

        # Delete the PM2 process if it exists
        if pm2 delete ${{ env.PM2_APP_NAME }}; then
          echo "PM2 process deleted"
        fi

        # Clear the PM2 dump
        pm2 cleardump

        # Start the PM2 process with the ecosystem file and save the process list
        pm2 start ${{ env.REMOTE_DEPLOY_DIR }}/${{ env.ECOSYSTEM_FILE }} --env production --only ${{ env.PM2_APP_NAME }}
        pm2 save

        EOF
